@charset "UTF-8";
/// Creates an opposite direction margin on the current object of a grid.
/// This is primarily used to self-correct an item in a centered-flex grid
///
/// @group Features
///
/// @name Omega flex
///
/// @argument {self | auto} [self]
///   When passed an `nth-of-type` argument of type `*n` with `block` display, 
///   the flex-omega mixin automatically creates a margin right on the last 
///   object in the row and the last object in the container,
///   which causes a centered flexbox to self correct.
///   Note that this mixin does NOT clear floats in order to allow for complex nth selectors.
///
/// @argument {map} $grid [$neat-grid]
///   The grid to be used to generate the margins.
///   By default, the global `$neat-grid` will be used.
///
/// @example scss - Usage
///   .element:nth-of-type(3n+2) {
///     @include flex-omega;
///   }
///
/// @example css - CSS Output
///   .element:nth-of-type(3n+2) {
///     margin-right: 20px;
///   }
///
/// @example scss - Usage
///   .element {
///     @include flex-omega(auto);
///   }
///
/// @example css - CSS Output
///   .element:last-child {
///     margin-right: 20px;
///   }

@mixin omega-flex($selector: auto, $grid: $neat-grid) {
  $_grid-gutter: _retrieve-neat-setting($grid, gutter);

  @if $selector == self {
    margin-#{_neat-opposite-direction($grid)}: $_grid-gutter;
  } @else if $selector == auto {
    &:last-child {
      margin-#{_neat-opposite-direction($grid)}: $_grid-gutter;
    }
  }
}
